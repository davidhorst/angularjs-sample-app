{"version":3,"sources":["webpack:///./app/components/mymessages/mymessages.module.js","webpack:///./app/components/mymessages/mymessages.states.js","webpack:///./app/components/mymessages/services/messagesListUI.service.js","webpack:///./app/components/mymessages/filters/messageBody.filter.js","webpack:///./app/components/mymessages/directives/sortMessages.directive.js","webpack:///./app/components/mymessages/directives/messageTable.component.js","webpack:///./app/components/mymessages/mymessages.component.js","webpack:///./app/components/mymessages/messageList.component.js","webpack:///./app/components/mymessages/message.component.js","webpack:///./app/components/mymessages/directives/folderList.component.js","webpack:///./app/components/mymessages/compose.component.js"],"names":["_compose","__webpack_require__","_folderList","_message","_messageList","_mymessages","_messageTable","_sortMessages","_messageBody","_messagesListUI","_mymessages2","MYMESSAGES_MODULE","angular","module","directive","sortMessages","component","compose","folderList","message","messageList","mymessages","messageTable","filter","messageBody","service","MessageListUI","config","$stateRegistry","register","composeState","messageState","messageListState","mymessagesState","parent","name","url","resolve","folders","Folders","all","views","data","requiresAuth","deepStateRedirect","default","state","sticky","params","folderId","folder","$stateParams","get","messages","Messages","byFolder","messagelist","messageId","nextMessageGetter","proximalMessageId","bind","messagecontent@mymessages","!$default.mymessages","$filter","AppConfig","_classCallCheck","this","sorted","sort","idx","findIndex","msg","_id","proximalIdx","length","undefined","$inject","$sce","msgText","arguments","trustAsHtml","split","map","p","join","restrict","link","scope","elem","attrs","col","chevron","element","append","on","evt","$watch","newVal","toggleClass","bindings","columns","controller","messageTableController","template","_this","colVisible","indexOf","_util","makeResponseMsg","subjectPrefix","origMsg","from","to","subject","prefix","body","date","quoteMessage","MessageController","$state","DialogService","$onInit","read","put","actions","reduce","obj","action","setProp","reply","replyMsg","go","forward","fwdMsg","editDraft","remove","nextMessageId","nextState","confirm","then","reload","ComposeController","pristineMessage","extend","emailAddress","copy","uiCanExit","canExit","equals","gotoPreviousState","$transition$","hasPrevious","send","save","Date","_this2"],"mappings":"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","file":"0.bundle.js","sourcesContent":["import {compose} from \"./compose.component\";\nimport {folderList} from \"./directives/folderList.component\";\nimport {message} from \"./message.component\";\nimport {messageList} from \"./messageList.component\";\nimport {mymessages} from \"./mymessages.component\";\nimport {messageTable} from \"./directives/messageTable.component\";\nimport {sortMessages} from \"./directives/sortMessages.directive\";\nimport {messageBody} from \"./filters/messageBody.filter\";\nimport {MessageListUI} from \"./services/messagesListUI.service\";\n\nimport {composeState, messageState, messageListState, mymessagesState} from \"./mymessages.states\";\n\nexport const MYMESSAGES_MODULE = angular.module('mymessages', []);\n\nMYMESSAGES_MODULE.directive('sortMessages', sortMessages);\n\nMYMESSAGES_MODULE.component('compose', compose);\nMYMESSAGES_MODULE.component('folderList', folderList);\nMYMESSAGES_MODULE.component('message', message);\nMYMESSAGES_MODULE.component('messageList', messageList);\nMYMESSAGES_MODULE.component('mymessages', mymessages);\nMYMESSAGES_MODULE.component('messageTable', messageTable);\n\nMYMESSAGES_MODULE.filter('messageBody', messageBody);\n\nMYMESSAGES_MODULE.service('MessageListUI', MessageListUI);\n\nMYMESSAGES_MODULE.config(['$stateRegistryProvider', function($stateRegistry) {\n  $stateRegistry.register(composeState);\n  $stateRegistry.register(messageState);\n  $stateRegistry.register(messageListState);\n  $stateRegistry.register(mymessagesState);\n}]);\n","/**\n * The mymessages state. This is the main state for the mymessages submodule.\n *\n * This state shows the list of folders for the current user. It retrieves the folders from the\n * Folders service.  If a user navigates directly to this state, the state redirects to the 'mymessages.messagelist'.\n */\nexport const mymessagesState = {\n  parent: 'shell',\n  name: \"mymessages\",\n  url: \"/mymessages\",\n  resolve: {\n    \n    // All the folders are fetched from the Folders service\n    folders: ['Folders', (Folders) => Folders.all()]\n  },\n  views: {\n    mymessages: 'mymessages'\n  },\n\n  // Mark this state as requiring authentication.  See ../routerhooks/requiresAuth.js.\n  data: { requiresAuth: true },\n\n  // If mymessages state is directly activated, redirect the transition to the most recent\n  // child state that was previously activated, or 'mymessages.messagelist' (by default)\n  deepStateRedirect: {\n    default: { state: 'mymessages.messagelist' }\n  },\n  sticky: true,\n};\n\n\n/**\n * This state shows the contents (a message list) of a single folder\n */\nexport const messageListState = {\n  name: 'mymessages.messagelist',\n  url: '/:folderId',\n\n  // The folderId parameter is part of the URL.  This params block sets 'inbox' as the default value.\n  // If no parameter value for folderId is provided on the transition, then it will be defaulted to 'inbox'\n  params: {folderId: \"inbox\"},\n  resolve: {\n\n    // Fetch the current folder from the Folders service, using the folderId parameter\n    folder: ['Folders', '$stateParams', (Folders, $stateParams) => Folders.get($stateParams.folderId)],\n\n    // The resolved folder object (from the resolve above) is injected into this resolve\n    // The list of message for the folder are fetched from the Messages service\n    messages: ['Messages', 'folder', (Messages, folder) => Messages.byFolder(folder)]\n  },\n  views: {\n\n    // This targets the \"messagelist\" named ui-view added to the DOM in the parent state 'mymessages'\n    messagelist: 'messageList'\n  }\n};\n\n\n/**\n * This state shows the contents of a single message.\n * It also has UI to reply, forward, delete, or edit an existing draft.\n */\nexport const messageState = {\n  name: 'mymessages.messagelist.message',\n  url: '/:messageId',\n  resolve: {\n\n    // Fetch the message from the Messages service using the messageId parameter\n    message: ['Messages', '$stateParams', (Messages, $stateParams) => Messages.get($stateParams.messageId)],\n    \n    // Provide the component with a function it can query that returns the closest message id\n    nextMessageGetter: ['MessageListUI', 'messages', (MessageListUI, messages) => MessageListUI.proximalMessageId.bind(MessageListUI, messages)]\n  },\n  views: {\n\n    // Relatively target the parent-state's parent-state's 'messagecontent' ui-view\n    // This could also have been written using ui-view@state addressing: 'messagecontent@mymessages'\n    // Or, this could also have been written using absolute ui-view addressing: '!$default.mymessages.messagecontent'\n    'messagecontent@mymessages': {component: 'message'}\n  }\n};\n\n\n/**\n * This state allows the user to compose a new message, edit a drafted message, send a message,\n * or save an unsent message as a draft.\n *\n * This state uses view-targeting to take over the ui-view that would normally be filled by the 'mymessages' state.\n */\nexport const composeState = {\n  name: 'mymessages.compose',\n  url: '/compose',\n\n  // Declares that this state has a 'message' parameter, that defaults to an empty object.\n  // Note the parameter does not appear in the URL.\n  params: {\n    message: {}\n  },\n  views: {\n\n    // Absolutely targets the ui-view named 'mymessages' (which is nested inside an unnamed ui-view) with the 'compose' component.\n    // Absolute targeting finds the nested ui-view in the DOM, using view names.\n    '!$default.mymessages': 'compose'\n  }\n};\n","/** Provides services related to a message list */\nexport class MessageListUI {\n  constructor($filter, AppConfig) {\n    this.$filter = $filter;\n    this.AppConfig = AppConfig;\n  }\n\n  /** This is a UI helper which finds the nearest messageId in the messages list to the messageId parameter */\n  proximalMessageId(messages, messageId) {\n    let sorted = this.$filter(\"orderBy\")(messages, this.AppConfig.sort);\n    let idx = sorted.findIndex(msg => msg._id === messageId);\n    var proximalIdx = sorted.length > idx + 1 ? idx + 1 : idx - 1;\n    return proximalIdx >= 0 ? sorted[proximalIdx]._id : undefined;\n  }\n}\nMessageListUI.$inject = ['$filter', 'AppConfig'];\n","/** Angular filter to format fake emails as HTML*/\nmessageBody.$inject = ['$sce'];\nexport function messageBody($sce) {\n  return (msgText = '') => $sce.trustAsHtml(msgText.split(/\\n/).map(p => `<p>${p}</p>`).join('\\n'));\n}","/**\n * A directive (for a table header) which changes the app's sort order\n */\nsortMessages.$inject = ['AppConfig'];\nexport function sortMessages(AppConfig) {\n  return {\n    restrict: 'A',\n    link: function(scope, elem, attrs) {\n      let col = attrs.sortMessages;\n      if (!col) return;\n      let chevron = angular.element(\"<i style='padding-left: 0.25em' class='fa'></i>\");\n      elem.append(chevron);\n\n      elem.on(\"click\", (evt) => AppConfig.sort = (AppConfig.sort === `+${col}`) ? `-${col}` : `+${col}`);\n      scope.$watch(() => AppConfig.sort, (newVal) => {\n        chevron.toggleClass(\"fa-sort-asc\", newVal == `+${col}`);\n        chevron.toggleClass(\"fa-sort-desc\", newVal == `-${col}`);\n      });\n    }\n  }\n}\n","/**\n * A component that displays a folder of messages as a table\n * \n * If a row is clicked, the details of the message is shown using a relative ui-sref to `.message`.\n * \n * ui-sref-active is used to highlight the selected row.\n * \n * Shows/hides specific columns based on the `columns` input binding.\n */\nexport const messageTable = {\n  bindings: { columns: '<', messages: '<' },\n\n  controller: messageTableController,\n\n  template: `\n  <md-card>\n    <md-card-contents>\n      <table>\n        <thead>\n          <tr>\n            <td ng-if=\"::$ctrl.colVisible('read')\"></td>\n            <td ng-if=\"::$ctrl.colVisible('from')\"     sort-messages=\"from\">Sender</td>\n            <td ng-if=\"::$ctrl.colVisible('to')\"       sort-messages=\"to\">Recipient</td>\n            <td ng-if=\"::$ctrl.colVisible('subject')\"  sort-messages=\"subject\">Subject</td>\n            <td ng-if=\"::$ctrl.colVisible('date')\"     sort-messages=\"date\">Date</td>\n          </tr>\n        </thead>\n    \n        <tbody>\n          <tr ng-repeat=\"message in $ctrl.messages | orderBy: $ctrl.AppConfig.sort track by message._id\"\n              ui-sref=\".message({messageId: message._id})\" ui-sref-active=\"active\">\n            <td ng-if=\"::$ctrl.colVisible('read')\"><i class=\"fa fa-circle\" style=\"font-size: 50%\" ng-show=\"!message.read\"></td>\n            <td ng-if=\"::$ctrl.colVisible('from')\">{{ message.from }}</td>\n            <td ng-if=\"::$ctrl.colVisible('to')\">{{ message.to }}</td>\n            <td ng-if=\"::$ctrl.colVisible('subject')\">{{ message.subject }}</td>\n            <td ng-if=\"::$ctrl.colVisible('date')\">{{ message.date | date: \"yyyy-MM-dd\" }}</td>\n          </tr>\n        </tbody>\n    \n      </table>\n    </md-card-contents>\n  </md-card>\n`\n};\n\nmessageTableController.$inject = ['AppConfig'];\nfunction messageTableController(AppConfig) {\n  this.AppConfig = AppConfig;\n  this.colVisible = (name) => this.columns.indexOf(name) !== -1;\n}","/**\n * The main mymessages component.\n *\n * Renders a list of folders, and has two viewports:\n * - messageList: filled with the list of messages for a folder\n * - messagecontent: filled with the contents of a single message.\n */\nexport const mymessages = {\n  bindings: {folders: '<'},\n\n  template: `\n    <div layout=\"row\" class=\"my-messages\">\n    \n      <!-- Show message folders -->\n      <folder-list folders=\"$ctrl.folders\"></folder-list>\n    \n      <!-- A named view for the list of messages in this folder.  This will be  filled in by the 'mymessages.messagelist' child state -->\n      <div ui-view=\"messagelist\" class=\"messagelist\"> </div>\n    \n    </div>\n    \n    <!-- A named ui-view for a message's contents.  The 'mymessages.messagelist.message' grandchild state plugs into this ui-view -->\n    <div layout=\"row\" layout-fill\" ui-view=\"messagecontent\"></div>\n    ` \n};\n","/**\n * This component renders a list of messages using the `messageTable` component\n */\nexport const messageList = {\n  bindings: { folder: '<', messages: '<' },\n  template: `\n    <div class=\"messages\">\n      <message-table columns=\"$ctrl.folder.columns\" messages=\"$ctrl.messages\"></message-table>\n    </div>\n`};","import {setProp} from \"../../utilities/util\";\n\n/** Helper function to prefix a message with \"fwd: \" or \"re: \" */\nconst prefixSubject = (prefix, message) => prefix + message.subject;\n/** Helper function which quotes an email message */\nconst quoteMessage = (message) => `\n\n\n\n---------------------------------------\nOriginal message:\nFrom: ${message.from}\nDate: ${message.date}\nSubject: ${message.subject}\n\n${message.body}`;\n\n/** Helper function to make a response message object */\nconst makeResponseMsg = (subjectPrefix, origMsg) => ({\n  from: origMsg.to,\n  to: origMsg.from,\n  subject: prefixSubject(subjectPrefix, origMsg),\n  body: quoteMessage(origMsg)\n});\n\n\n/**\n * The controller for the Message component\n */\nclass MessageController {\n  constructor($state, DialogService, Messages) {\n    this.$state = $state;\n    this.DialogService = DialogService;\n    this.Messages = Messages;\n  }\n\n  /**\n   * When the user views a message, mark it as read and save (PUT) the resource.\n   *\n   * Apply the available actions for the message, depending on the folder the message belongs to.\n   */\n  $onInit() {\n    this.message.read = true;\n    this.Messages.put(this.message);\n\n    this.actions = this.folder.actions.reduce((obj, action) => setProp(obj, action, true), {});\n  }\n\n  /**\n   * Compose a new message as a reply to this one\n   */\n  reply(message) {\n    let replyMsg = makeResponseMsg(\"Re: \", message);\n    this.$state.go('mymessages.compose', { message: replyMsg });\n  };\n\n  /**\n   * Compose a new message as a forward of this one.\n   */\n  forward(message) {\n    let fwdMsg = makeResponseMsg(\"Fwd: \", message);\n    delete fwdMsg.to;\n    this.$state.go('mymessages.compose', { message: fwdMsg });\n  };\n\n  /**\n   * Continue composing this (draft) message\n   */\n  editDraft(message) {\n    this.$state.go('mymessages.compose', { message: message });\n  };\n\n  /**\n   * Delete this message.\n   *\n   * - confirm deletion\n   * - delete the message\n   * - determine which message should be active\n   * - show that message\n   */\n  remove(message) {\n    let nextMessageId = this.nextMessageGetter(message._id);\n    let nextState = nextMessageId ? 'mymessages.messagelist.message' : 'mymessages.messagelist';\n    let params = { messageId: nextMessageId };\n\n    this.DialogService.confirm(\"Delete?\", undefined)\n        .then(() => this.Messages.remove(message))\n        .then(() => this.$state.go(nextState, params, { reload: 'mymessages.messagelist' }));\n  };\n}\nMessageController.$inject = ['$state', 'DialogService', 'Messages'];\n\n/**\n * This component renders a single message\n *\n * Buttons perform actions related to the message.\n * Buttons are shown/hidden based on the folder's context.\n * For instance, a \"draft\" message can be edited, but can't be replied to.\n */\nexport const message = {\n  bindings: { folder: '<', message: '<', nextMessageGetter: '<' },\n\n  controller: MessageController,\n\n  template: `\n  <md-card flex>\n    <md-card-content>\n    <div class=\"header\">\n      <div>\n        <h4>{{$ctrl.message.subject}}</h4>\n        <h5>{{$ctrl.message.from}} <i class=\"fa fa-long-arrow-right\"></i> {{$ctrl.message.to}}</h5>\n      </div>\n  \n      <div class=\"line2\">\n        <div>{{$ctrl.message.date | date: 'longDate'}} {{$ctrl.message.date | date: 'mediumTime'}}</div>\n        <div>\n          <md-button class=\"md-primary md-raised\" ng-show=\"$ctrl.actions.edit\" ng-click=\"$ctrl.editDraft($ctrl.message)\"><i class=\"fa fa-pencil\"></i> <span>Edit Draft</span></md-button>\n          <md-button class=\"md-primary md-raised\" ng-show=\"$ctrl.actions.reply\" ng-click=\"$ctrl.reply($ctrl.message)\"><i class=\"fa fa-reply\"></i> <span>Reply</span></md-button>\n          <md-button class=\"md-primary md-raised\" ng-show=\"$ctrl.actions.forward\" ng-click=\"$ctrl.forward($ctrl.message)\"><i class=\"fa fa-forward\" ></i> <span>Forward</span></md-button>\n          <md-button class=\"md-primary md-raised\" ng-show=\"$ctrl.actions.delete\" ng-click=\"$ctrl.remove($ctrl.message)\"><i class=\"fa fa-close\"></i> <span>Delete</span></md-button>\n        </div>\n      </div>\n    </div>\n  \n    <!-- Pass the raw (plain text) message body through the messageBody filter to format slightly nicer. -->\n    <div class=\"body\" ng-bind-html=\"::$ctrl.message.body | messageBody\"></div>\n    </md-card-content>\n  </md-card>\n`\n};\n","/**\n * Renders a list of folders\n */\nexport const folderList = {\n  bindings: {folders: '<'},\n\n  template: `\n  <md-card>\n   <md-list>\n    <md-divider></md-divider>\n    <md-list-item \n      ng-repeat=\"folder in $ctrl.folders\"\n      ng-click=\"null\"\n      ui-sref=\".messagelist({folderId: folder._id})\"\n      style=\"height:1.7em; min-height: initial;\"\n      >\n        {{folder._id}}\n       \n      <md-divider></md-divider>\n    </md-list-item>\n  </md-list>\n  </md-card>\n  `\n};\n","/**\n * The controller for the Compose component\n */\nclass ComposeController {\n  constructor($state, DialogService, AppConfig, Messages) {\n    this.$state = $state;\n    this.DialogService = DialogService;\n    this.AppConfig = AppConfig;\n    this.Messages = Messages;\n  }\n\n  /**\n   * Create our message's model using the current user's email address as 'message.from'\n   * Then extend it with all the properties from (non-url) state parameter 'message'.\n   * Keep two copies: the editable one and the original one.\n   * These copies are used to check if the message is dirty.\n   */\n  $onInit() {\n    this.pristineMessage = angular.extend({from: this.AppConfig.emailAddress}, this.$stateParams.message);\n    this.message = angular.copy(this.pristineMessage);\n  }\n\n  /**\n   * Checks if the edited copy and the pristine copy are identical when the state is changing.\n   * If they are not identical, the allows the user to confirm navigating away without saving.\n   */\n  uiCanExit() {\n    if (this.canExit || angular.equals(this.pristineMessage, this.message)) {\n        return true;\n    }\n\n    var message = 'You have not saved this message.';\n    var question = 'Navigate away and lose changes?';\n    return this.DialogService.confirm(message, question, \"Yes\", \"No\");\n  }\n\n  /**\n   * Navigates back to the previous state.\n   *\n   * - Checks the $transition$ which activated this controller for a 'from state' that isn't the implicit root state.\n   * - If there is no previous state (because the user deep-linked in, etc), then go to 'mymessages.messagelist'\n   */\n  gotoPreviousState() {\n    let $transition$ = this.$transition$;\n    let hasPrevious = !!$transition$.from().name;\n    let state = hasPrevious ? $transition$.from() : \"mymessages.messagelist\";\n    let params = hasPrevious ? $transition$.params(\"from\") : {};\n    this.$state.go(state, params);\n  };\n\n  /** \"Send\" the message (save to the 'sent' folder), and then go to the previous state */\n  send(message) {\n    this.Messages.save(angular.extend(message, {date: new Date(), read: true, folder: 'sent'}))\n        .then(() => this.canExit = true)\n        .then(() => this.gotoPreviousState());\n  };\n\n  /** Save the message to the 'drafts' folder, and then go to the previous state */\n  save(message) {\n    this.Messages.save(angular.extend(message, {date: new Date(), read: true, folder: 'drafts'}))\n        .then(() => this.canExit = true)\n        .then(() => this.gotoPreviousState());\n  }\n}\nComposeController.$inject = ['$state', 'DialogService', 'AppConfig', 'Messages'];\n\n/**\n * This component composes a message\n *\n * The message might be new, a saved draft, or a reply/forward.\n * A Cancel button discards the new message and returns to the previous state.\n * A Save As Draft button saves the message to the \"drafts\" folder.\n * A Send button sends the message\n */\nexport const compose = {\n  bindings: { $stateParams: '<', $transition$: '<' },\n\n  controller: ComposeController,\n\n  template: `\n    <div class=\"compose\">\n      <div class=\"header\">\n        <div class=\"flex-h\"> <label>Recipient</label> <input type=\"text\" id=\"to\" name=\"to\" ng-model=\"$ctrl.message.to\"> </div>\n        <div class=\"flex-h\"> <label>Subject</label> <input type=\"text\" id=\"subject\" name=\"subject\" ng-model=\"$ctrl.message.subject\"> </div>\n      </div>\n    \n      <div class=\"body\">\n        <textarea name=\"body\" id=\"body\" ng-model=\"$ctrl.message.body\" cols=\"30\" rows=\"20\"></textarea>\n        \n        <div class=\"buttons\">\n          <!-- Clicking this button brings the user back to the state they came from (previous state) -->\n          <button class=\"btn btn-primary\" ng-click=\"$ctrl.gotoPreviousState()\"><i class=\"fa fa-times-circle-o\"></i><span>Cancel</span></button>\n          <button class=\"btn btn-primary\" ng-click=\"$ctrl.save($ctrl.message)\"><i class=\"fa fa-save\"></i><span>Save as Draft</span></button>\n          <button class=\"btn btn-primary\" ng-click=\"$ctrl.send($ctrl.message)\"><i class=\"fa fa-paper-plane-o\"></i><span>Send</span></button>\n        </div>\n      </div>\n    </div>\n`\n};"],"sourceRoot":""}